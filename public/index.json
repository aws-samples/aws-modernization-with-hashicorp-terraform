[
{
	"uri": "/",
	"title": "AWS Modernization Workshop",
	"tags": [],
	"description": "",
	"content": " AWS Modernization Workshop with HashiCorp Terraform Cloud Welcome This hands-on lab is part of the AWS Marketplace DevOps Workshop Series. In this lab, you will gain experience using HashiCorp Terraform Cloud to deploy infrastructure as code in AWS. By completing this lab you will learn how to leverage HashiCorp Terraform Cloud for easier deployments of your applications and infrastructure in AWS.\nInfrastructure as code (IaC) tools allow you to manage infrastructure with configuration files rather than through a graphical user interface. IaC allows you to build, change, and manage your infrastructure in a safe, consistent, and repeatable way by defining resource configurations that you can version, reuse, and share.\nTerraform is HashiCorp’s infrastructure as code tool. It lets you define resources and infrastructure in human-readable, declarative configuration files, and manages your infrastructure’s lifecycle. Using Terraform has several advantages over manually managing your infrastructure:\n Terraform can manage infrastructure on multiple cloud platforms. The human-readable configuration language helps you write infrastructure code quickly. Terraform\u0026rsquo;s state allows you to track resource changes throughout your deployments. You can commit your configurations to version control to safely collaborate on infrastructure.  HashiCorp Terraform Cloud is available in AWS Marketplace. AWS Marketplace is a digital software catalog that makes it easy to find, try, buy, deploy, and manage software that runs on AWS. AWS Marketplace has a broad and deep selection of ISV solutions that can help you build your ideal DevOps toolchain in the cloud.\n\n"
},
{
	"uri": "/010_introduction.html",
	"title": "Introduction",
	"tags": [],
	"description": "",
	"content": " Learning Objectives Today we are going to learn the following topics:\n What will the audience learn today? This section and all pages within it should set the stage and be the hook for why the audience should care.  Workshop Structure This workshop is broken into the sections list below. Estimated time for completing the workshop is 1.5-2.5 hours.\n Prerequisites (5 minutes) Provision a Cloud9 instance and validate Setup (15 minutes) Install necessary tooling to complete the lab What will the partner section look like and how long does it take to complete  "
},
{
	"uri": "/030_self_guided_setup.html",
	"title": "Self Guided Setup",
	"tags": [],
	"description": "",
	"content": " Self-Paced Workshop Welcome to the Self Guided Setup section! This workshop requires an AWS account where there is IAM user/identity that has proper permissions to set up the necessary AWS components to work through the workshop. Worried about costs associated with this workshop? Don\u0026rsquo;t worry, there\u0026rsquo;s a page that will allow you to request for AWS credits to pay for any costs incurred through this workshop!\nHere is a preview of what we will be setting up:\n Creating an AWS account with proper permissions Requesting AWS credit from AWS Marketplace Creating a Cloud9 IDE Workspace Creating an IAM Role Attaching an IAM Role Configuring Cloud9 Workspace  "
},
{
	"uri": "/040_terraform_cloud_setup.html",
	"title": "Terraform Cloud Setup",
	"tags": [],
	"description": "",
	"content": " Terraform Cloud Setup Collaborate on version-controlled configuration using Terraform Cloud. Follow this track to build, change, and destroy infrastructure using remote runs and state.\nAbout Terraform Cloud and Terraform Enterprise Terraform Cloud is an application that helps teams use Terraform together. It manages Terraform runs in a consistent and reliable environment, and includes easy access to shared state and secret data, access controls for approving changes to infrastructure, a private registry for sharing Terraform modules, detailed policy controls for governing the contents of Terraform configurations, and more.\nTerraform Cloud is available as a hosted service at https://app.terraform.io. Small teams can sign up for free to connect Terraform to version control, share variables, run Terraform in a stable remote environment, and securely store remote state. Paid tiers allow you to add more than five users, create teams with different levels of permissions, enforce policies before creating infrastructure, and collaborate more effectively.\nThe Business tier allows large organizations to scale to multiple concurrent runs, create infrastructure in private environments, manage user access with SSO, and automates self-service provisioning for infrastructure end users.\nEnterprises with advanced security and compliance needs can purchase Terraform Enterprise, our self-hosted distribution of Terraform Cloud. It offers enterprises a private instance that includes the advanced features available in Terraform Cloud.\n"
},
{
	"uri": "/050_deploying_infrastructure.html",
	"title": "Deploying Infrastructure",
	"tags": [],
	"description": "",
	"content": " Deploying Infrastructure Terraform is HashiCorp’s infrastructure as code tool. It lets you define resources and infrastructure in human-readable, declarative configuration files, and manages your infrastructure’s lifecycle. Using Terraform has several advantages over manually managing your infrastructure:\n Terraform can manage infrastructure on multiple cloud platforms. The human-readable configuration language helps you write infrastructure code quickly. Terraform\u0026rsquo;s state allows you to track resource changes throughout your deployments. You can commit your configurations to version control to safely collaborate on infrastructure.  "
},
{
	"uri": "/060_sentinel.html",
	"title": "Sentinel",
	"tags": [],
	"description": "",
	"content": " Sentinel Sentinel is an embedded policy-as-code framework integrated with various HashiCorp products. It enables fine-grained, logic-based policy decisions, and can be extended to use information from external sources. Terraform Cloud enables users to enforce policies during runs.\nA policy consists of:\n The policy controls defined as code An enforcement level that changes how a policy affects the run lifecycle  ~\u0026gt; Note: This functionality is available in the Terraform Cloud Team \u0026amp; Governance tier, as well as Enterprise. Organization owners can enable a 30-day free trial in their settings under \u0026ldquo;Plan \u0026amp; Billing\u0026rdquo;.\n"
},
{
	"uri": "/030_self_guided_setup/30_aws_setup_your_own.html",
	"title": "1. AWS Account Setup",
	"tags": [],
	"description": "",
	"content": " Setting up your AWS account  You are responsible for the cost of the AWS services used while running this workshop in your AWS account. We highly recommend you to go to the request AWS credit page so you can run this workshop without any charge to you.\n  If you don\u0026rsquo;t already have an AWS account with Administrator access: create one now by clicking here\n Once you have an AWS account, ensure you are following the remaining workshop steps as an IAM user with administrator access to the AWS account: Create a new IAM user to use for the workshop\n Enter the user details:  Attach the AdministratorAccess IAM Policy:  Click to create the new user:  Take note of the login URL and save:   "
},
{
	"uri": "/010_introduction/10_foreword.html",
	"title": "Foreword",
	"tags": [],
	"description": "",
	"content": " How did we get here? Set the stage for the audience, this page isn\u0026rsquo;t mandatory but will can be a great page for a hook.\n"
},
{
	"uri": "/040_terraform_cloud_setup/1-cloud-sign-up.html",
	"title": "Sign up for Terraform Cloud",
	"tags": [],
	"description": "",
	"content": " In this tutorial, you will learn about how Terraform Cloud enables collaboration. Then, you will sign up for a Terraform Cloud account and create an organization.\nWhat is Terraform Cloud? Terraform Cloud is an application that manages Terraform runs in a consistent and reliable environment instead of on your local machine. It stores shared state and secret data, and connects to version control systems so that you and your team can work on infrastructure as code within your usual code workflow. It also has a private registry for sharing Terraform modules.\nPaid features include access controls for approving changes to infrastructure, detailed policy controls for governing the contents of Terraform configurations, and more.\nFor more details on the Terraform Cloud tiers, visit the feature overview and AWS Marketplace pricing page.\nThe VCS-driven workflow A workspace is the basic unit of Terraform Cloud infrastructure configuration. A workspace contains Terraform configuration files, environment variables, Terraform input variables, and state files everything Terraform needs to manage a given collection of infrastructure. To manage infrastructure with Terraform Cloud, you:\n Write configuration - Create or update Terraform configuration, which represents your infrastructure in HashiCorp Configuration Language (HCL). Commit changes to version control - Check your configuration files into a version control system (VCS) as the source of truth for your configuration. Select a workspace - Connect the VCS repo containing your configuration to a new or existing Terraform Cloud workspace. Configure variables - Define your workspace\u0026rsquo;s Terraform variables and environment variables. These are any values you want your configuration\u0026rsquo;s end users to customize, and credentials or other sensitive values. Plan \u0026amp; apply - Execute Terraform Cloud runs (plans and applies) to manage your infrastructure. You can trigger these via the Terraform Cloud UI or by opening pull requests in your VCS.  Since Terraform Cloud supports multiple users, you can collaborate with your team on each of these steps. For instance, each time you plan a new change, your team can review and approve the plan before it is applied.\nYou can also use Terraform Cloud as a remote state backend for the CLI using local configuration and variables. Learn about this workflow in our AWS get started tutorials.\n Create an account Visit https://app.terraform.io/signup/account and follow the prompts to create a free Terraform Cloud account.\nIf you already have a Terraform Cloud account, go to to the next step.\n When you sign up, you will receive an email asking you to confirm your email address. Confirm your email address before moving on. When you click the link to confirm your email address, the Terraform Cloud UI will ask which setup workflow you would like use. Select \u0026ldquo;Start from scratch\u0026rdquo;.\nCreate an organization The next screen will prompt you to create a new organization. Your organization is free, and the members you add will be able to collaborate on your workspaces and share private modules.\nEnter an organization name and email address. You can use the same email address that you used for your account.\nIf you want to join an existing organization, give the organization\u0026rsquo;s administrator the email address you used to create an account. They will be able to send you an invite.\n Then click \u0026ldquo;Create organization\u0026rdquo;. Terraform Cloud will prompt you to create a new workspace. The Create a Workspace tutorial will guide you through to creating a new workspace and connecting it to a version control repository.\nNext Steps In this tutorial, you created a Terraform Cloud account and organization. For more information about organizations and their relationship to workspaces, teams, and users, refer to the Organizations documentation.\nNow that you have created an account and organization, you are ready to create a workspace and start managing infrastructure with Terraform Cloud.\n"
},
{
	"uri": "/040_terraform_cloud_setup/2-cloud-workspace-create.html",
	"title": "Create a Workspace",
	"tags": [],
	"description": "",
	"content": " In this tutorial, you will create a version control system (VCS) driven Terraform Cloud workspace by connecting a sample repository to Terraform Cloud. This Terraform Cloud workspace will provision an AWS EC2 instance.\nPrerequisites While Terraform can provision resources on many different providers and connect with several popular version control systems (VCSs), this tutorial requires:\n an AWS account a GitHub account  Fork a Github repository Visit this example GitHub repository, which contains the Terraform configuration for an EC2 instance.\nClick the \u0026ldquo;Fork\u0026rdquo; button at the top right of the page to copy the repository to your GitHub account.\nExplore your fork of the repository. It contains Terraform configuration files, which define and expose information about your infrastructure:\n main.tf specifies the AWS provider, a provider plugin that connects Terraform Cloud to the AWS API, and the random provider, another provider that will generate the random name for the table. It also defines resources that represent the table name and the table itself, with the information that AWS needs to know about the table\u0026rsquo;s settings. variables.tf defines the input variables that are referenced in main.tf, which make the configuration easy to customize and collaborate on. You will set some of these values in the Terraform Cloud UI later on in this tutorial. outputs.tf defines the information about your infrastructure that Terraform Cloud will display to you when it makes changes. versions.tf defines version constraints for Terraform, the AWS provider, and the random provider.  Connect Terraform Cloud to GitHub Navigate to the \u0026ldquo;Workspaces\u0026rdquo; page from the main menu and click \u0026rdquo;+ New workspace\u0026rdquo;\nOn the \u0026ldquo;New Workspace\u0026rdquo; page, select the \u0026ldquo;Version control workflow\u0026rdquo; from the workflow options screen. On the \u0026ldquo;Connect to VCS\u0026rdquo; screen, press the \u0026ldquo;GitHub\u0026rdquo; button and then choose \u0026ldquo;GitHub.com (Custom)\u0026rdquo; from the drop-down to continue.\nA new window will open asking you to authorize Terraform Cloud to use your GitHub account. Click the green \u0026ldquo;Authorize\u0026rdquo; button to connect Terraform Cloud to your GitHub account.\nYou may be asked to install Terraform Cloud for your GitHub account or organization. If prompted, select your account or organization to install Terraform Cloud.\nFor information about installing Terraform Cloud on GitHub, refer to the Terraform Documentation: Configuration-Free GitHub Usage.\nChoose a repository Next, Terraform will display a list of your GitHub repositories. Choose the repository you forked, called \u0026ldquo;tfc-guide-example\u0026rdquo;. If you have many GitHub repositories, you may need to filter the list to find the correct one.\nCreate the workspace On the next screen, leave the workspace name and \u0026ldquo;Advanced options\u0026rdquo; unchanged, and click the purple \u0026ldquo;Create workspace\u0026rdquo; button to create the workspace.\nIt will take a few minutes for Terraform Cloud to connect to your GitHub repository. Once connected, Terraform Cloud will display a notification that your configuration was uploaded successfully.\nNext Steps In this tutorial, you created a workspace and connected it to your GitHub repository. Read more about Terraform Cloud workspaces in the documentation.\nNext, you will configure your new workspace with variables and provision your infrastructure by queuing a run in Terraform Cloud.\n"
},
{
	"uri": "/030_self_guided_setup/32_request_credit.html",
	"title": "2. AWS Credit Request",
	"tags": [],
	"description": "",
	"content": "To help you cover the AWS service costs incurred by doing this tutorial, AWS Credits are available courtesy of AWS Marketplace. Submit the form and you will receive a confirmation email with an AWS Credit Code. Credits are available while supplies last.  Request AWS Credits         AWS Marketplace is a digital software catalog that makes it easy to find, try, buy, deploy, and manage software that works with AWS. AWS Marketplace has over 8,000 listings from 1,600+ ISV\u0026rsquo;s that can help you master DevOps and drive modern application development in the cloud.\n   "
},
{
	"uri": "/050_deploying_infrastructure/3-cloud-workspace-configure.html",
	"title": "Create Infrastructure",
	"tags": [],
	"description": "",
	"content": " In this tutorial, you will customize the workspace you created in the previous tutorial by defining Terraform variables for your EC2 settings. Then, you will retrieve your AWS credentials and set them as sensitive environment variables. Finally, you will use Terraform Cloud to provision an EC2 instance.\nConfigure Terraform variables Return to the Terraform Cloud UI and visit the \u0026ldquo;Variables\u0026rdquo; page for your tfc-guide-example workspace, where you will set your credentials.\nTerraform Cloud supports two types of variables: environment variables and Terraform variables. Either type can be marked as sensitive, which prevents them from being displayed in the Terraform Cloud web UI and makes them write-only.\nTerraform Cloud will define Terraform Variables as input variables in Terraform\u0026rsquo;s configuration language. You can use them to customize the infrastructure that Terraform creates from your configuration.\nFind the \u0026ldquo;Terraform Variables\u0026rdquo; section to set two variables that Terraform will use to configure your instance.\n   Variable Value Sensitive     instance_type t2.micro no   instance_name Provisioned by Terraform no    Click the \u0026ldquo;Save variable\u0026rdquo; button to save each one. After saving, the \u0026ldquo;Terraform Variables\u0026rdquo; section displays your new variable values.\nFind your AWS credentials EC2 instances are Amazon Web Services (AWS) services. In order for Terraform to provision AWS resources for you, it needs credentials for your AWS account.\nThis tutorial will provision resources that qualify under the AWS free-tier. If your account does not qualify under the AWS free-tier.\n Log into the AWS console and find your Access key ID and Secret access key on this page.\nConfigure environment variables Terraform Cloud uses an ephemeral environment to run Terraform operations that create and manage your infrastructure. You will set that environment\u0026rsquo;s Environment Variables in the Terraform Cloud web UI to configure provider credentials or to configure the Terraform binary itself.\nScroll down to the \u0026ldquo;Environment Variables\u0026rdquo; section, and create two variables by clicking the \u0026ldquo;Add variable\u0026rdquo; button. Check the \u0026ldquo;Sensitive\u0026rdquo; checkbox for both of them.\n   Variable Value Sensitive     AWS_ACCESS_KEY_ID Your AWS Access key ID yes   AWS_SECRET_ACCESS_KEY Your AWS Secret access key yes    If you have temporary AWS credentials, you must also add your AWS_SESSION_TOKEN as an environment variable.\n Click the \u0026ldquo;Save variable\u0026rdquo; button to save each one. Once you are done, the \u0026ldquo;Environment Variables\u0026rdquo; section should look like this:\nIf you use the Terraform CLI, your local environment variables do not auto populate into the environment where Terraform Cloud runs the Terraform binary. You must set your environment variables in Terraform Cloud.\n Plan infrastructure changes Now that you have set your variables, select \u0026ldquo;Start new plan\u0026rdquo; from the \u0026ldquo;Actions\u0026rdquo; drop down menu, choose the \u0026ldquo;Plan (most common)\u0026rdquo; option, and provide an optional explanation. Then select the purple \u0026ldquo;Start plan\u0026rdquo; button to start a plan. This may take a few minutes.\nThis produces an execution plan that describes which actions Terraform will take to change real infrastructure to match the configuration Terraform will not make any changes until you confirm and apply the plan This gives you and your team an opportunity to review the planned changes.\nThe output format is similar to the diff format generated by tools such as Git. Output with a + next to it means that Terraform will create this resource. The plan also shows the attributes that Terraform will set. The value (known after apply) means that Terraform will not have this value until after it creates the resource.\nNo real infrastructure changes happen until you confirm and apply the plan. This checkpoint gives you and your team an opportunity to review the planned changes before they happen.\nApply planned changes Once the plan is complete, click the \u0026ldquo;Confirm \u0026amp; Apply\u0026rdquo; button, followed by the \u0026ldquo;Confirm Plan\u0026rdquo; button to apply the change.\nAfter a few minutes, your apply should complete. Terraform Cloud will display a confirmation.\nNow return to the workspace\u0026rsquo;s \u0026ldquo;Overview\u0026rdquo; page. Under the details about your latest run, Terraform displays a table of the resources currently managed in the workspace.\nIt also shows the workspace\u0026rsquo;s outputs in the \u0026ldquo;Outputs\u0026rdquo; tab for easy access.\nCongratulations! You created an AWS EC2 instance using Terraform Cloud.\nVerify that the infrastructure exists by visiting the AWS web console page for EC2 in the N.California/us-west-1 region, the region specified in the provider configuration.\nThe EC2 instance that you have provisioned will remain active until it is deleted. You will do this in the clean-up tutorial.\n Next Steps In this tutorial, you configured your workspace with environment and Terraform variables, and created a EC2 instance using Terraform Cloud. Read more about variables in Terraform Cloud in the documentation.\nNow you are ready to modify your EC2 instance by updating your Terraform variables and changing your configuration files.\n"
},
{
	"uri": "/010_introduction/12_problem_to_solve.html",
	"title": "Problem Statement",
	"tags": [],
	"description": "",
	"content": " What is the problem Effective workshops require an important and common problem that the partner\u0026rsquo;s solution will solve. What is the problem?\n"
},
{
	"uri": "/050_deploying_infrastructure/4-cloud-change.html",
	"title": "Change Infrastructure",
	"tags": [],
	"description": "",
	"content": " In this tutorial, you will change the name of your AWS EC2 instance by adjusting a Terraform variable in the Terraform Cloud web UI. You will also add an additional tag to your instance by opening and then merging a pull request to your configuration repository.\nNow that you have provisioned infrastructure with Terraform Cloud, you are ready to make changes to that infrastructure.\nThere are two ways to update your workspace deployments on Terraform Cloud:\n Changing the configuration in VCS Updating variables in the Terraform Cloud UI.   Explore your workspace The landing page for a workspace includes an overview of its current state and configuration.\nOn the upper right hand side, you can find a resource count, the workspace version, and the time since the last update.\nAlong the top is a menu of available actions and configurations for the workspace.\n The Runs tab shows a list of all of the plan and apply actions you have taken with this workspace. The States tab shows the state of your workspace after each successful run. Terraform stores everything it knows about your infrastructure in state as a tfstate file. This allows Terraform to not only create — but also manage — your infrastructure as it changes over time. The Variables tab is where you configure Terraform variables and environment variables. Settings contains all of the Terraform Cloud settings for your workspace, and is where you will destroy your infrastructure at the end of these tutorials. The lock icon indicates whether the workspace is locked, preventing others from triggering new runs. The Actions menu allows you to lock the workspace or trigger a new run.  The workspace overview shows details about the most recent run and current settings for your workspace.\n The Latest run section displays details of the last run, including a count of resource modifications, duration, and estimated change in cost. The resources and outputs tables display details about the current infrastructure and any outputs configured for the workspace. The sidebar contains metrics and details about workspace settings.  Scrolling further down, you\u0026rsquo;ll find the README for the repository, if one exists.\nEdit variables Infrastructure-as-code allows you to share and recreate infrastructure. Variables make your configuration flexible enough to use in different contexts. Changing variables is one of the most common ways to customize or update infrastructure, and you can do it from the Terraform Cloud web UI.\nIn the Terraform Cloud UI, return to the \u0026ldquo;Variables\u0026rdquo; section of your workspace.\nChange the value of instance_name from Provisioned by Terraform to Updated by Terraform and click the purple \u0026ldquo;Save variable\u0026rdquo; button.\nSelect the \u0026ldquo;Start new plan\u0026rdquo; option from the \u0026ldquo;Actions\u0026rdquo; menu and use the pre-selected option, \u0026ldquo;Plan (most common)\u0026rdquo;. Then, click on \u0026ldquo;Start plan\u0026rdquo; to queue your plan run. After the plan completes, the plan log should indicate that there are 0 to add, 1 to change, 0 to destroy.\nIn this case, Terraform can make the change to the EC2 instance without destroying and recreating it. Click the \u0026ldquo;Confirm \u0026amp; Apply\u0026rdquo; button, followed by the \u0026ldquo;Confirm Plan\u0026rdquo; button to apply the change.\nEnable speculative plans Terraform Cloud workspaces can run speculative plans to show you the changes Terraform would make to your infrastructure if you merge a pull request.\nSpeculative plans are: - plan-only runs - you cannot apply the proposed infrastructure changes until you merge the PR - temporary - they will not appear in any Terraform Cloud logs - individual - you can only access them from a direct link on a GitHub PR - non-destructive - no action is taken, infrastructure is not provisioned\nVerify that your workspace has speculative plans enabled. Under the \u0026ldquo;Settings\u0026rdquo; tab, click \u0026ldquo;Version Control\u0026rdquo;. Set \u0026ldquo;Automatic speculative plans\u0026rdquo; to enabled, and click \u0026ldquo;Update VCS settings\u0026rdquo;.\nEdit configuration If you work on the team that maintains your infrastructure, you may need to develop your configuration by modifying configuration files. You will edit your infrastructure as code with the same workflow you use to make changes to other code, by opening a Pull Request (PR). Terraform Cloud pulls configuration files from their source of truth in version control to propose and apply changes to your infrastructure.\nThe repository you forked already includes a branch named add_tag that adds an additional tag to your EC2 instance. Usually, you would edit and test the configuration locally using the Terraform CLI, push the changes to a branch, and then open a PR. For this tutorial, we have made the changes for you.\nVisit your forked tfc-guide-example repo in GitHub and click \u0026ldquo;New pull request\u0026rdquo; button to create a pull request.\nSet the base repository to your fork of the tfc-guide-example repo (not the fork in the HashiCorp organization) and the base branch to the master branch. Set the the compare branch to add_tag.\nYou must create the PR against your personal forked repository. You will need to merge the PR later in this tutorial and you cannot merge to the official example repo.\n Create the pull request by clicking through the GitHub UI. Once you have created the pull request, Terraform Cloud will trigger a speculative plan.\nView this plan from GitHub by clicking on the \u0026ldquo;Details\u0026rdquo; link in the \u0026ldquo;Checks\u0026rdquo; portion of your pull request.\nWhen the speculative plan finishes, you and your teammates can review it before approving or merging the pull request. This is another way that Terraform Cloud enables teams to collaborate on planned infrastructure changes.\nSpeculative plans cannot be applied, because applying them would cause your infrastructure to differ from the configuration on your main branch of your connected repository. You must merge the pull request before you can apply this change.\nReturn to the GitHub UI, and merge the pull request with the \u0026ldquo;Merge pull request\u0026rdquo; button.\nSwitch back to the \u0026ldquo;Runs\u0026rdquo; tab for your workspace in Terraform Cloud. Terraform Cloud has picked up the change to your configuration and started a new run. When the plan completes the run will wait for your approval. Click on the new run in the Terraform Cloud UI.\nReview the run details. \u0026ldquo;Confirm \u0026amp; Apply\u0026rdquo; the run. Once it completes, you can verify that Terraform added the tags by searching for the EC2 instance in the AWS console.\nNext Steps The Terraform documentation contains more details on state, the VCS-driven workflow, and speculative plans.\nIn these tutorials, you configured a new workspace, provisioned infrastructure, and updated that infrastructure. Now, you are ready to destroy the resources and workspace.\nIn the next tutorial, you will clean up the resources created by your configuration and find additional learning materials on Terraform\u0026rsquo;s configuration language.\n"
},
{
	"uri": "/030_self_guided_setup/34_start_cloud9workspace.html",
	"title": "3. Create a Workspace",
	"tags": [],
	"description": "",
	"content": " Set up the Workspace AWS Cloud9 is a cloud-based integrated development environment (IDE) that lets you write, run, and debug your code with just a browser. It includes a code editor, debugger, and terminal. Cloud9 comes prepackaged with essential tools for popular programming languages, including JavaScript, Python, PHP, and more, so you don’t need to install files or configure your laptop for this workshop.\nWe will use Amazon Cloud9 to access our AWS accounts via the AWS CLI in this Workshop. There are a few steps to complete to set this up\n Create a new Cloud9 IDE environment Create an EKS cluster Configure workshop specific requirements  Create a new Cloud9 IDE environment 1 . Within the AWS console, use the region drop list to select us-east-1 (N. Virginia). This will ensure the workshop script provisions the resources in this same region..\n2 . Navigate to the Cloud9 console or just search for it under the AWS console services menu.\n3 . Click the Create environment button\n4 . For the name use partnerName-workshop, then click Next step\n5 . Select the default instance type t3.micro\n6 . Leave all the other settings as default and click Next step followed by Create environment\nThis will take about 1-2 minutes to provision\n Configure Cloud9 IDE environment When the environment comes up, customize the environment by:\n Close the welcome page tab\n Close the lower work area tab\n Open a new terminal tab in the main work area.\n  If you don\u0026rsquo;t like this dark theme, you can change it from the View / Themes Cloud9 workspace menu.\n Cloud9 requires third-party-cookies. You can whitelist the specific domains. You are having issues with this, Ad blockers, javascript disablers, and tracking blockers should be disabled for the cloud9 domain, or connecting to the workspace might be impacted.\n "
},
{
	"uri": "/050_deploying_infrastructure/5-cloud-destroy.html",
	"title": "Destroy Resources and Workspaces",
	"tags": [],
	"description": "",
	"content": " In this tutorial, you will destroy the EC2 instance and delete your Terraform Cloud workspace.\nOver the course of these tutorials, you created an EC2 instance in AWS, a Terraform Cloud workspace, and a GitHub repository.\nDestroy infrastructure Now that you have provisioned and changed infrastructure with Terraform Cloud, the final stage of your infrastructure\u0026rsquo;s lifecycle is to destroy it. Terraform Cloud allows you to destroy the infrastructure you have provisioned as a part of the standard workflow.\nTo destroy the infrastructure you provisioned in these tutorials, go to your workspace in the Terraform Cloud UI. Next, from the top menu, select \u0026ldquo;Settings -\u0026gt; Destruction and Deletion\u0026rdquo;.\nFrom this page you can:\n Queue destroy plan destroys all infrastructure managed by the workspace. Delete from Terraform Cloud deletes your workspace from Terraform Cloud without destroying the infrastructure the workspace manages.  Deleting a workspace does not destroy its infrastructure. For example, if you were to delete this workspace, the AWS EC2 instance you provisioned earlier would still exist.\n Queue a destroy plan Click the red \u0026ldquo;Queue destroy plan\u0026rdquo; button.\nTerraform Cloud will prompt you to enter your workspace name before you can queue a destroy plan.\nEnter your workspace name and queue the plan.\nDestroy the infrastructure As it does with all plans, Terraform Cloud will ask you to \u0026ldquo;Confirm and Apply\u0026rdquo; the plan. Do so now to destroy your EC2 instance.\nAfter a few minutes, the apply step should complete successfully.\nVerify that Terraform destroyed the EC2 instance by visiting the AWS web console in the region where you created it. The configuration defaults to region N. California/us-west-1.\nDelete the AWS IAM user (optional) If you created an AWS IAM user for these tutorials, delete or disable this user in the AWS console. Navigate to the Identity Access Management (IAM) section, and then to the user you created. Use the AWS Console to delete the user, or disable the user\u0026rsquo;s access keys.\nDelete the workspace (optional) If you plan to continue to the next tutorial in this collection and your organization does not contain other workspaces, do not destroy the workspace created.\n If you do not plan to run these tutorials again and want to keep your Terraform Cloud organization clean, you can delete the workspace you created. Terraform Cloud does not limit the number of workspaces you have or charge per workspace, so whether you delete the workspace is up to you.\nTo delete the workspace, return to the \u0026ldquo;Settings -\u0026gt; Destruction \u0026amp; Deletion\u0026rdquo; page, and click the red \u0026ldquo;Delete from Terraform Cloud\u0026rdquo; button.\nTerraform Cloud will prompt you to enter your workspace name before you can click \u0026ldquo;Delete workspace\u0026rdquo;. Input the workspace name and click the button to delete the workspace.\nNext steps In these tutorials you used Terraform Cloud to provision, change, and destroy infrastructure. Now you are ready to learn more about developing Terraform configurations. We recommend downloading the Terraform CLI so you can develop configurations locally. Get started with the CLI on your preferred cloud platform:\n Terraform CLI with AWS  At the end of the CLI tutorials you will log into Terraform Cloud via the CLI, and get practice with Terraform Cloud\u0026rsquo;s CLI-driven workflow.\nYou can use the CLI workflow alongside the VCS workflow in these tutorials to develop infrastructure configuration locally, commit it to version control, and deploy it into production.\nTo explore Terraform Cloud\u0026rsquo;s paid features (which you can enable with a free trial), continue to the next tutorial. These include enforcing policies with Sentinel policy-as-code, and estimating the cost of infrastructure changes.\nLearn more about the concepts you used in these tutorials by exploring the documentation.\n"
},
{
	"uri": "/010_introduction/14_partner.html",
	"title": "Who is this partner?",
	"tags": [],
	"description": "",
	"content": " What is HashiCorp? HashiCorp is a remote-first company headquartered in San Francisco that solves development, operations, and security challenges in infrastructure so organizations can focus on business-critical tasks.\nHashiCorp was founded by Mitchell Hashimoto and Armon Dadgar in 2012 with the goal of revolutionizing datacenter management: application development, delivery, and maintenance.\nThe datacenter of today is very different than the datacenter of yesterday, and we think the datacenter of tomorrow is just around the corner. We\u0026rsquo;re writing software to take you all the way from yesterday to today, and then safely to tomorrow and beyond.\nPhysical, virtual, containers. Private cloud, public cloud, hybrid cloud. IaaS, PaaS, SaaS. Windows, Linux, Mac. These are just some of the choices faced when architecting a datacenter of today. And the choice is not one or the other; instead, it is often a combination of many of these.\nHashiCorp builds tools to ease these decisions by presenting solutions that span the gaps. Our tools manage both physical machines and virtual machines, Windows, and Linux, SaaS and IaaS, etc. And we\u0026rsquo;re committed to supporting next-generation technologies, as well.\nHashiCorp was founded and continues to be run by the primary authors of all our core technologies powering thousands of companies worldwide. We speak at conferences and write books related to application and infrastructure management.\nAll our foundational technologies are open source and developed openly, and have been since 2010.\n"
},
{
	"uri": "/060_sentinel/6-policy-quickstart.html",
	"title": "Enforce a Policy",
	"tags": [],
	"description": "",
	"content": " Sentinel is an embedded policy-as-code framework integrated with various HashiCorp products. It enables fine-grained, logic-based policy decisions, and can be extended to use information from external sources. Terraform Cloud enables users to enforce policies during runs.\nA policy consists of:\n The policy controls defined as code An enforcement level that changes how a policy affects the run lifecycle  This functionality is available in the Terraform Cloud Team \u0026amp; Governance tier, as well as Enterprise. Organization owners can enable a 30-day free trial in their settings under \u0026ldquo;Plan \u0026amp; Billing\u0026rdquo;.\n Policy sets are a named grouping of policies and their enforcement levels. Each policy must belong to a policy set before it can be evaluated during a run. Each policy set may be applied to specific workspaces, or all workspaces within an organization. Policy sets are the mapping between policies and workspaces.\nIn this tutorial, you will define a policy set in a version control system (VCS), then connect it to Terraform Cloud to verify that the Terraform version is 0.14.0 and above.\nPrerequisites This tutorial assumes that you are familiar with Terraform Cloud and you have an existing Terraform Cloud workspace configured with AWS access credentials.\nIf you do not, refer to the Create a Workspace tutorial and Set Up Workspace tutorial to learn more about Terraform Cloud and set up a Terraform Cloud workspace configured with AWS access credentials.\nYou must be in the \u0026ldquo;owners\u0026rdquo; team or have \u0026ldquo;Manage Policies\u0026rdquo; organization-level permissions to create new policy sets and policies.\nFork GitHub Repository To create a policy set, you will need a VCS repository to host the policy configuration. Fork the example Enforce Policy repository.\nIn the repository, you will find two files - sentinel.hcl and allowed-terraform-version.sentinel.\nExplore a policy set sentinel.hcl defines the policy set. This configuration declares a policy named allowed-terraform-version and sets a soft-mandatory enforcement level. You can define multiple policy blocks in the sentinel.hcl file to configure more policies.\npolicy \u0026#34;allowed-terraform-version\u0026#34; { enforcement_level = \u0026#34;soft-mandatory\u0026#34; } Enforcement levels in Terraform Cloud define behavior when policies fail to evaluate successfully. Sentinel provides three enforcement modes.\n Hard-mandatory requires that the policy passes. If a policy fails, the run is halted and may not be applied until the failure is resolved.\n Soft-mandatory is similar to hard-mandatory, but allows an administrator to override policy failures on a case-by-case basis.\n Advisory will never interrupt the run, and instead will only surface policy failures as informational to the user.\n  Explore a policy allowed-terraform-version.sentinel defines the policy declared in the policy set. Sentinel code files must follow the naming convention of \u0026lt;policy name\u0026gt;.sentinel.\nThis policy will pass and return a value of true when the Terraform version is 0.14.0 and above. You can experiment with this policy and trigger a failure by changing the regular expression from ^0\\\\.14\\\\.\\\\d+$ to ^0\\\\.11\\\\.\\\\d+$.\nimport \u0026#34;tfplan\u0026#34; main = rule { tfplan.terraform_version matches \u0026#34;^(0\\\\.1(4|5)|1\\\\.0)\\\\.\\d+$\u0026#34; } Connect the Policy to Terraform Cloud You need to connect your policy set to your Terraform Cloud organization before you\u0026rsquo;re able to use it. First, go to your Terraform Cloud\u0026rsquo;s organization settings by clicking the \u0026ldquo;Settings\u0026rdquo; button in the top navigation bar.\nThen, click on \u0026ldquo;Policy Sets\u0026rdquo; in the left navigation bar.\nThe Policy Sets page lists all existing policy sets. The list will be empty if this is your first policy set. Click on the \u0026ldquo;Connect a new policy set\u0026rdquo; button.\nThe policy set creation page offers a few options for creating your policy set. Connect to a VCS to source the policy set.\n Select \u0026ldquo;Github\u0026rdquo; as the VCS provider Select your forked repository On the \u0026ldquo;Configure settings\u0026rdquo; section, under \u0026ldquo;Scope of Policies\u0026rdquo;, select \u0026ldquo;Policies enforced on select workspaces\u0026rdquo;. Specify the workspaces you want this policy to apply to and click the \u0026ldquo;Add workspace\u0026rdquo; button to complete adding the workspace to this policy set. Finally, click the \u0026ldquo;Connect policy set\u0026rdquo; button to create the policy set.  Policy set names within a Terraform Cloud organization must be unique. If your organization already has a policy named learn-terraform-enforce-policies, rename the policy so it\u0026rsquo;s unique.\n This creates a policy set that checks whether the Terraform version is 0 14.0 and above for the workspaces specified.\nAfter creating the policy set, you\u0026rsquo;ll be taken back to the policy sets index page. The list now contains your new policy set. The VCS information, including the latest commit SHA, should appear within the policy set (if it\u0026rsquo;s empty at first, allow a few moments and refresh).\nNow that the policy set is configured, navigate to one of the workpaces you selected and queue a new plan. There will now be an additional policy check step in the run, and you should see the allowed-terraform-version policy execute and pass in the output.\nNext steps Congrats — you\u0026rsquo;ve created and used a policy check to verify the Terraform version before each run.\nIn the next tutorial, you will learn how to enable and integrate cost estimation into policies. This provides another tool to manage your infrastructure spending.\nTo learn more about policies, refer to the Terraform Cloud Sentinel documentation.\n"
},
{
	"uri": "/060_sentinel/7-cost-estimation.html",
	"title": "Control Costs with Policies",
	"tags": [],
	"description": "",
	"content": " Terraform Cloud estimates costs for many resources found in your Terraform configuration. It displays an hourly and monthly cost for each resource, and the monthly delta. It also totals the cost and delta of all estimatable resources.\nIn this tutorial, you will enable cost estimation and define policy to check whether the total monthly delta is less than one hundred dollars a month.\nThis functionality is available in the Terraform Cloud Team \u0026amp; Governance tier, as well as Enterprise. Organization owners can enable a 30-day free trial in their settings under \u0026ldquo;Plan \u0026amp; Billing\u0026rdquo;. Cost estimates are not available for workspaces using versions of Terraform less than 0.12.0.\n Prerequisites For this tutorial you will need:\n A Terraform Cloud Team \u0026amp; Governance tier account or a Terraform Enterprise account A GitHub account An AWS account to create example resources  You should also be familiar with how to create and destroy Terraform Cloud workspaces.\nDo not apply this policy to a production workspace as it may impact your production environment.\n Terraform Cloud will not estimate cost on runs or applies targeted against a subset of resources.\n Fork the sample repository Fork the sample repository, which contains an example Terraform configuration to provision an EC2 instance.\nNavigate to the versions.tf file in your fork of the repository in the Github web UI, and click the pencil icon in the top right corner.\nIn the backend configuration block, replace \u0026quot;\u0026lt;YOUR_TERRAFORM_ORG\u0026gt;\u0026quot; with the name of your Terraform Cloud organization. Commit the change.\nCreate a Terraform Cloud workspace Navigate to your Terraform Cloud organization and create a new VCS-backed workspace connected to your fork of the learn-sentinel-tfc repository.\nIf you completed the Upload Your Sentinel Policy Set to Terraform Cloud tutorial, you may already have a workspace for this configuration. Feel free to use it.\n Configure workspace variables  Navigate to your learn-sentinel-tfc workspace\u0026rsquo;s \u0026ldquo;Variables\u0026rdquo; page Define a variable called instance_type and set the value to t2.large. Define environment variables for your AWS_ACCESS_KEY_ID and AWS_SECRET_ACCESS_KEY. Be sure to set both as sensitive.  When complete, your variable definitions will match the following:\nVerify costs using policies To verify cost estimates using policies, you need to define your policy and update your policy set.\nCreate a fork of the example repository, which contains a Sentinel policy that flags any resource changes that increase costs by greater than \\$100.\nThe sentinel.hcl file in this repository declares the new policy in your policy set. Note that the enforcement_level is set to soft-mandatory: this allows team members with explicitly set permission to override the policy check and logs and overrides.\npolicy \u0026#34;less-than-100-month\u0026#34; { enforcement_level = \u0026#34;soft-mandatory\u0026#34; } The less-than-100-month.sentinel file contains the policy definition.\nimport \u0026#34;tfrun\u0026#34; import \u0026#34;decimal\u0026#34; delta_monthly_cost = decimal.new(tfrun.cost_estimate.delta_monthly_cost) main = rule { delta_monthly_cost.less_than(100) } This policy uses the tfrun import to check that the cost delta for a Terraform run is no more than \\$100. The decimal import is used for more precise calculations when working with currency numbers.\nTerraform Cloud will run checks for policies defined in sentinel.hcl in all workspaces associated with the policy set.\nCreate a policy set In Terraform Cloud, navigate to \u0026ldquo;Settings\u0026rdquo; \u0026gt; \u0026ldquo;Policy Sets\u0026rdquo; and select \u0026ldquo;Connect a new policy set\u0026rdquo;. Configure your fork of the learn-terraform-cost-estimation repository as the source.\nThe search bar for policy repositories is case sensitive.\n In Terraform Cloud, you can apply policy sets either across your organization, or to specific workspaces.\nOn the \u0026ldquo;Configure Settings\u0026rdquo; page:\n Select \u0026ldquo;Policies enforced on selected workspaces\u0026rdquo; under \u0026ldquo;Scope of Policies\u0026rdquo; Select your learn-sentinel-tfc workspace and click the purple \u0026ldquo;Add workspace button\u0026rdquo; Click \u0026ldquo;Connect policy set\u0026rdquo;  Trigger a run For a full list of supported resources in Terraform Cloud cost estimation, refer to the AWS Cost Estimation Documentation.\n Navigate to your learn-sentinel-tfc workspace. Select \u0026ldquo;Start new plan\u0026rdquo; from the \u0026ldquo;Actions\u0026rdquo; menu, and run the default \u0026ldquo;Plan (most common)\u0026rdquo; option.\nView cost estimate After queueing a new run, Terraform Cloud will estimate changes to your resource costs and display them in the run UI. There you will find the list of resources, their price details, and the list of un-estimated resources. You will also find the new total to determine the proposed overall monthly cost once the run is applied.\nIn this case, the new resource definition satisfies the Sentinel policy check you defined.\nThis is just an estimate; some resources do not have cost information available or have unpredictable usage-based pricing.\n Click \u0026ldquo;Discard run\u0026rdquo; to cancel the run.\nDelete the policy set Navigate back to your policy set under \u0026ldquo;Settings\u0026rdquo; \u0026gt; \u0026ldquo;Policy Sets\u0026rdquo;. Under workspaces, click \u0026ldquo;Delete policy set\u0026rdquo;. Confirm by clicking \u0026ldquo;Yes, delete policy set\u0026rdquo;.\nDelete workspace If you do not plan on exploring other tutorials in this collection, you can delete the workspace you created. Terraform Cloud does not charge per workspace, so you are free to leave it if you would like.\nUnder your workspace\u0026rsquo;s \u0026ldquo;Settings\u0026rdquo; menu, select the \u0026ldquo;Destruction and Deletion\u0026rdquo; option and then delete the workspace.\nNext steps Congratulations - you have enabled cost estimation and used it in a policy check! This provides another tool to manage your infrastructure spending.\nTo learn more about cost estimation, refer to the Cost Estimation documentation.\nIf you would like to learn more about Terraform Cloud, refer to the following resources:\n Read the Terraform Cloud documentation Learn about the free and paid features of Terraform Cloud Learn more about Cost Estimation Documentation Read the Run States Documentation.  "
},
{
	"uri": "/010_introduction/16_workshop_next_step.html",
	"title": "Workshop Next Steps",
	"tags": [],
	"description": "",
	"content": " Workshop Prerequisites There are a few prerequisite tasks you must perform before getting started on this workshop. These are:\n Access to an AWS account w/ proper permissions A Cloud9 IDE Workspace Sign-up for partner\u0026rsquo;s free trial to use solution (if necessary)  In the next section, there will be instructions on how to set everything up, step by step.\n "
},
{
	"uri": "/030_self_guided_setup/36_config_workshop_req.html",
	"title": "5. Configure workshop specific requirements",
	"tags": [],
	"description": "",
	"content": " Configure Workspace  Return to your workspace and click the gear icon (in top right corner), or click to open a new tab and choose \u0026ldquo;Open Preferences\u0026rdquo;\n Select AWS SETTINGS and turn off AWS managed temporary credentials\n Close the Preferences tab\n Copy and run (paste with Ctrl+P or CMD+P) the commands below.\nBefore running it, review what it does by reading through the comments.\n# Update awscli sudo pip install --upgrade awscli \u0026amp;\u0026amp; hash -r # Install jq command-line tool for parsing JSON, and bash-completion sudo yum -y install jq gettext bash-completion moreutils # Install yq for yaml processing echo \u0026#39;yq() { docker run --rm -i -v \u0026#34;${PWD}\u0026#34;:/workdir mikefarah/yq yq \u0026#34;$@\u0026#34; }\u0026#39; | tee -a ~/.bashrc \u0026amp;\u0026amp; source ~/.bashrc # Verify the binaries are in the path and executable for command in jq aws do which $command \u0026amp;\u0026gt;/dev/null \u0026amp;\u0026amp; echo \u0026#34;$commandin path\u0026#34; || echo \u0026#34;$commandNOT FOUND\u0026#34; done # Remove existing credentials file. rm -vf ${HOME}/.aws/credentials # Set the ACCOUNT_ID and the region to work with our desired region export AWS_REGION=$(curl -s 169.254.169.254/latest/dynamic/instance-identity/document | jq -r \u0026#39;.region\u0026#39;) test -n \u0026#34;$AWS_REGION\u0026#34; \u0026amp;\u0026amp; echo AWS_REGION is \u0026#34;$AWS_REGION\u0026#34; || echo AWS_REGION is not set # Validate that our IAM role is valid. aws sts get-caller-identity --query Arn | grep partnerName-workshop-admin -q \u0026amp;\u0026amp; echo \u0026#34;IAM role valid\u0026#34; || echo \u0026#34;IAM role NOT valid\u0026#34;  If the IAM role is not valid, DO NOT PROCEED. Go back and confirm the steps on this page.\n If you are done, please proceed to the Partner Setup section!\n"
},
{
	"uri": "/090_cleanup.html",
	"title": "Cleanup",
	"tags": [],
	"description": "",
	"content": " Workshop Cleanup Place instructions to cleanup all resources and anything that the participants have created here or within this section.\n"
},
{
	"uri": "/099_survey.html",
	"title": "Survey",
	"tags": [],
	"description": "",
	"content": " Survey To help us improve this product, please take some time to fill out the  Survey  "
},
{
	"uri": "/categories.html",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/tags.html",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
}]